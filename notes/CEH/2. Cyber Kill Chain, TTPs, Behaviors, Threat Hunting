Cyber Kill Chain, TTPs, Behaviors, Threat Hunting

- Cyber Kill Chain
	Developed by Lockheed Martin
	Seven Phases
		Recon
			Gathering and putting together information about the target
			What technologies, what kind of people, etc.
			What in the public sphere will help me understand the people I'm going to go after
			
		Weaponization
			Finding the possible exploitable vulnerabilities
			Creating a deliverable payload
		
		Delivery
			Actually passing off the payload to the target
			Can be done with phishing/spearphishing/whaling, USB dropping, web pages/watering holes
		
		Exploitation
			Target has interacted with the deliverable and executed itt
			We are now exploiting the target
			
		Installation
			The deliverable downloads/installs more functionality
			Effectively bringing in more malware
			The attacker is efectively now in control
		
		Command and Control
			Attacker has a channel of communication to the exploited box
			Maybe build up a small army of exploited boxes
			Use encryption to hide communication or other obfuscations
			PrivEsc time
		
		Actions and Objectives
			Once everything is installed and controlled, do what your goal was from the start
			Maybe look for PII, steal credit card numbers, bank accounts, ransomware, exfiltration, etc.

- Tactics, Techniques, and Procedures
	Tactics
		Guiding principles
		Objectives at first
		Initial actions
		The having of a goal makes it a tactic
	
	Techniques
		The how of the tactic
		What are you going to do to achieve the goals in the tactic
	
	Procedures
		The more granular details
		Step-by-steps to doing the technique to achieve the tactic

- Common Adversarial Behaviors
	Start with understanding how someone might come after your organization - that will allow you to build better defenses
	
	Internal Recon
		Once a hacker gains access to a system, they want to look at what other systems are available
		Scanning for, for instance, the trusted networks after reaching the DMZ
	
	Powershell
		Great for scripting, but therefore a great vector for attackers
		Can fly under the radar because administrators use powershell
		If it's built in, try locking it down by allowing only administrators to use it
		Log and monitor to see that only the right people are using it
	
	CLI/Terminal
		Same idea as powershell, especially for linux environments
		Regular users likely often do not use the CLI, so check for irregular instances of that, especially if activity increases dramatically
	
	HTTP User Agent
		Using tools like BurpSuite, can edit the user agent
		If a web application sees a command in the user agent it may just run it
		Can also insert information people don't see for things like C2 communications
	
	Web Shell Use
		Interacting with a system, eg. web server, via a browser
		Effectively gives the ability to use CLI from a browser
		WAF is a good tool against this
	
	C2 Use
		Effectively having a centralized are from which to issue commands
		Same kind of idea as, for instance, EDR and AV centralized agents, just kind of the opposite
	
	DNS Tunnelling
		Use of DNS queries is a great way to exfil data since DNS is almost always allowed and hard to monitor
		Will likely bypass firewalls, etc.
		Only way to detect is to just be looking at amount of traffic
	
	Data Staging
		Creating a package for exfiltration that will avoid detection
		Data may also be staged for destruction or crypto-locking
		Do file integrity logging and weird traffic in order to detect

- Threat Hunting Concepts
	Assume that there has already been a data breach - usually a long time, about 200 days, passes before a data breach is detected
	Search for indicators of a breach in order to find breaches faster
	
	Start with a hypothesis - if I were an attacker, I would do xyz at abc in order to ijk
	Figure out which groups are most likely to target you and use their TTPs to formulate the hypothesis
	
	IoC
		Indicator of Compromise
		Something pointing to a security breach
		Threat hunting may discover an IoC - remember, an IoC doesn't exist until you find it
		
		Types
			Atomic
				self-contained
				IP address
				Email address
				
			Computes
				Derived data
				Hash values
				Reg ex
				
			Behavioral
				Logical combining of atomic and compute
		
		Categories
			Email
				Email address
				Subject line
				Attachments
				Links
			
			Network
				Domain info
				IP Address
			
			Host-based
				File names
				Hash values
				Registry entries
				Drivers
			
			Behavioral
				Macros running PowerShell
				Service accounts running commands like a user would
				Just abnormal behaviors that systems likely wouldn't normally do
	
	
